#include <xc.h>
#define _XTAL_FREQ 20000000  // 20MHz Crystal

// I2C LCD Address (commonly 0x27 or 0x3F - check your module!)
#define I2C_LCD_ADDR 0x27

// LCD Control bits
#define LCD_BACKLIGHT 0x08
#define LCD_ENABLE    0x04
#define LCD_COMMAND   0
#define LCD_DATA      1
#define LIGHT PORTCbits.RC5
#define OFF PORTDbits.RD0
#define AUTO PORTDbits.RD1
#define ON PORTDbits.RD2
#define S1 PORTDbits.RD3
#define S2 PORTDbits.RD4
#define S3 PORTDbits.RD5
#define S4 PORTDbits.RD6

// CONFIG bits (adjust as per your setup)
#pragma config FOSC = HS
#pragma config WDTE = OFF, PWRTE = ON, BOREN = ON, LVP = OFF, CPD = OFF, WRT = OFF, CP = OFF

// Function Prototypes
void I2C_Init(void);
void I2C_Start(void);
void I2C_Stop(void);
void I2C_Write(unsigned char data);
void LCD_SendNibble(unsigned char nibble, unsigned char mode);
void LCD_SendByte(unsigned char value, unsigned char mode);
void LCD_Init(void);
void LCD_Clear(void);
void LCD_SetCursor(unsigned char row, unsigned char col);
void LCD_Print(const char* str);

//--------------------------------------
// I2C Functions
//--------------------------------------
void I2C_Init(void) {
    SSPCON = 0x28;      // Enable MSSP in Master mode
    SSPCON2 = 0x00;
    SSPADD = ((_XTAL_FREQ/4)/100000)-1;  // 100kHz @ 20MHz
    SSPSTAT = 0;
    TRISC3 = 1;  // SCL
    TRISC4 = 1;  // SDA
}

void I2C_Wait(void) {
    while ((SSPCON2 & 0x1F) || (SSPSTAT & 0x04));
}

void I2C_Start(void) {
    I2C_Wait();
    SEN = 1;
}

void I2C_Stop(void) {
    I2C_Wait();
    PEN = 1;
}

void I2C_Write(unsigned char data) {
    I2C_Wait();
    SSPBUF = data;
}

//--------------------------------------
// LCD Functions
//--------------------------------------
void LCD_PulseEnable(unsigned char data) {
    I2C_Start();
    I2C_Write((I2C_LCD_ADDR << 1));  // Send address
    I2C_Write(data | LCD_ENABLE);
    __delay_us(1);
    I2C_Write(data & ~LCD_ENABLE);
    I2C_Stop();
    __delay_us(50);
}

void LCD_SendNibble(unsigned char nibble, unsigned char mode) {
    unsigned char data = (nibble & 0xF0) | LCD_BACKLIGHT | (mode ? 0x01 : 0x00);
    LCD_PulseEnable(data);
}

void LCD_SendByte(unsigned char value, unsigned char mode) {
    LCD_SendNibble(value & 0xF0, mode);           // High nibble
    LCD_SendNibble((value << 4) & 0xF0, mode);    // Low nibble
}

void LCD_Init(void) {
    __delay_ms(50);
    LCD_SendNibble(0x30, LCD_COMMAND);
    __delay_ms(5);
    LCD_SendNibble(0x30, LCD_COMMAND);
    __delay_us(150);
    LCD_SendNibble(0x30, LCD_COMMAND);
    LCD_SendNibble(0x20, LCD_COMMAND); // 4-bit mode

    LCD_SendByte(0x28, LCD_COMMAND); // 2 lines, 5x8 dots
    LCD_SendByte(0x0C, LCD_COMMAND); // Display ON
    LCD_SendByte(0x06, LCD_COMMAND); // Entry mode
    LCD_Clear();
}

void LCD_Clear(void) {
    LCD_SendByte(0x01, LCD_COMMAND);
    __delay_ms(2);
}

void LCD_SetCursor(unsigned char row, unsigned char col) {
    unsigned char addr = (row == 1) ? 0x80 + col : 0xC0 + col;
    LCD_SendByte(addr, LCD_COMMAND);
}

void LCD_Print(const char* str) {
    while(*str) {
        LCD_SendByte(*str++, LCD_DATA);
    }
}
 void AUTO_MODE(){
    
        if (S1== 1 ||S2== 1 ||S3== 1 ||S4== 1 )
        {
             LIGHT  = 1;  
              LCD_Clear();
             LCD_SetCursor(1, 0);
    LCD_Print("Door Open!");
     LCD_SetCursor(3, 1);
    LCD_Print("Light ON!");
    
        }
        else 
        {     LCD_Clear();
              LCD_SetCursor(1, 0);
    LCD_Print("Door closed");
  
            
           LIGHT = 0;  
        }  
   }
   void ON_MODE ()
    {
             { 
                 LCD_Clear();
             LCD_SetCursor(3, 1);
    LCD_Print("Light ON");
     LIGHT  = 1;  
             }
        
    }

//--------------------------------------
// Main Program
//--------------------------------------
 void main(void) {
    TRISBbits.TRISB0 = 0; 
    TRISD = 0xFF;    // Port D input
    I2C_Init();
    LCD_Init();
  

    while (1)
    {
         if (AUTO == 1)
        {
            AUTO_MODE();
        }
        
        if (ON ==1)
            
        {
           ON_MODE();      
        }
         else 
        {
           LIGHT = 0;  
        }
          if (OFF ==1)
            
        {
           LCD_SetCursor(3, 1);
    LCD_Print("Light OFF"); 
        }
         __delay_ms(500);

    }
}
